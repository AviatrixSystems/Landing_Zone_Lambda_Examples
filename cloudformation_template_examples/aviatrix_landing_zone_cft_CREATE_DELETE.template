{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This AWS Cloudformation template creates an AWS Lambda function to run initial-setup process for an Aviatrix controller instance.",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": { "default": "CFT-Parameter-Group for Aviatrix Controller Configurations" },
                    "Parameters": [
                        "AviatrixControllerHostnameParam",
                        "AviatrixControllerAdminPasswordParam"
                    ]
                },
                {
                    "Label": { "default": "CFT-Parameter-Group for Aviatrix-Action Common Parameter" },
                    "Parameters": [
                        "AccessAccountNameParam",
                        "AviatrixActionParam",
                        "TgwNameParam",
                        "AwsSideASNumberParam"
                    ]
                },
                {
                    "Label": { "default": "Advanced Configuration" },
                    "Parameters": [
                        "PrefixStringParam",
                        "KeywordForCloudWatchLogParam",
                        "DelimiterForCloudWatchLogParam",
                        "AviatrixApiVersionParam",
                        "AviatrixApiRouteParam"
                    ]
                }
            ],

            "ParameterLabels": {
                "AviatrixControllerHostnameParam": {
                    "default": "Public IP of Aviatrix Controller"
                },
                "AviatrixControllerAdminPasswordParam": {
                    "default": "Controller Admin Password"
                },
                "AviatrixActionParam": {
                    "default": "Aviatrix Action"
                },
                "AccessAccountNameParam": {
                    "default": "Access Account Name for TGW"
                },
                "TgwNameParam": {
                    "default": "TGW Name"
                },

                "AwsSideASNumberParam": {
                    "default": "AWS Side AS Number"
                },

                "PrefixStringParam": {
                    "default": "Prefix String"
                },
                "KeywordForCloudWatchLogParam": {
                    "default": "Keyword String for CloudWatch Log"
                },
                "DelimiterForCloudWatchLogParam": {
                    "default": "Delimiter String for CloudWatch Log"
                },
                "AviatrixApiVersionParam": {
                    "default": "Aviatrix API Version"
                },
                "AviatrixApiRouteParam": {
                    "default": "Aviatrix API Route"
                }
            }
        }
    },

    "Parameters": {
        "AviatrixControllerHostnameParam": {
            "Type": "String",
            "Description": "Enter your controller IP or controller hostname",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})",
            "Default": "123.123.123.123"
        },
        "AviatrixControllerAdminPasswordParam": {
            "Type": "String",
            "Description": "Enter the password of your controller admin user",
            "MinLength": "1",
            "MaxLength": "64",
            "NoEcho": true
        },
        "AviatrixActionParam": {
            "Type": "String",
            "Description": "Select an Aviatrix Action you would like to perform",
            "AllowedValues" : ["Create", "Delete"],
            "Default": "Create"
        },
        "AccessAccountNameParam": {
            "Type": "String",
            "Description": "Enter the Aviatrix-Access-Account of your controller",
            "MinLength": "0",
            "MaxLength": "64",
            "Default": "1-aws-role"  
        },

        "TgwNameParam": {
            "Type": "String",
            "Description": "Enter the name of your AWS TGW",
            "Default": "my-tgw"
        },
        "AwsSideASNumberParam": {
            "Type": "Number",
            "Description": "Valid value range: 64512-65534 or 4200000000-4294967294",
            "MinValue" : "0",
            "MaxValue" : "4294967294",
            "Default" : "64512"
        },

        "PrefixStringParam": {
            "Type": "String",
            "Description": "(OPTIONAL) Prefix string for some resource names",
            "MinLength": "0",
            "MaxLength": "64",
            "Default" : "aviatrix"
        },
        "KeywordForCloudWatchLogParam": {
            "Type": "String",
            "Description": "(OPTIONAL) The keyword string is inserted in the CloudWatch log which generated by the AWS Lambda function that is going to be created by this CFT",
            "MinLength": "0",
            "MaxLength": "64",
            "Default" : "aviatrix-lambda-log"
        },
        "DelimiterForCloudWatchLogParam": {
            "Type": "String",
            "Description": "(OPTIONAL) The delimiter string is used along with the Keyword String",
            "AllowedValues" : ["", "-", "=", "---", "==="],
            "Default": "---"
        },
        "AviatrixApiVersionParam": {
            "Type": "String",
            "Description": "Aviatrix API Version",
            "AllowedValues" : ["v1"],
            "Default": "v1"
        },
        "AviatrixApiRouteParam": {
            "Type": "String",
            "Description": "Aviatrix API Route",
            "AllowedValues" : ["api/"],
            "Default": "api/"
        }
    },

    "Resources": {
        "CustomServiceSetupLambdaResource" : {
            "Type" : "Custom::ServiceSetupLambda",
            "Properties" : {
                "ServiceToken"                        : { "Fn::GetAtt" : ["LambdaFunctionResource", "Arn"] },    # Specifies where AWS CloudFormation sends requests to
                "PrefixStringParam"                   : { "Ref": "PrefixStringParam" },
                "TgwRegionNameParam"                  : { "Ref": "AWS::Region"       },
                "CFT_STACK_NAME"                      : { "Ref": "AWS::StackName"},
                "AWS_Account_ID"                      : { "Ref": "AWS::AccountId"},

                "AviatrixControllerHostnameParam"     : { "Ref": "AviatrixControllerHostnameParam" },
                "AviatrixApiVersionParam"             : { "Ref": "AviatrixApiVersionParam" },
                "AviatrixApiRouteParam"               : { "Ref": "AviatrixApiRouteParam" },
                "AviatrixControllerAdminPasswordParam"        : { "Ref": "AviatrixControllerAdminPasswordParam" },

                "AviatrixActionParam"                 : { "Ref": "AviatrixActionParam" },
                "AccessAccountNameParam"              : { "Ref": "AccessAccountNameParam" },

                "KeywordForCloudWatchLogParam"        : { "Ref": "KeywordForCloudWatchLogParam" },
                "DelimiterForCloudWatchLogParam"      : { "Ref": "DelimiterForCloudWatchLogParam" },
                
                
                "TgwNameParam"                        : { "Ref": "TgwNameParam" },
                "AwsSideASNumberParam"                : { "Ref": "AwsSideASNumberParam" }
            }
        },

        "LambdaIamRoleResource": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": { "Fn::Join": ["-", [ {"Ref": "PrefixStringParam"}, "ryan-test-role-for-lambda" ]] },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AdministratorAccess",
                    "arn:aws:iam::aws:policy/IAMFullAccess",
                    "arn:aws:iam::aws:policy/CloudWatchLogsFullAccess"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeAddresses",
                                        "ec2:LaunchInstances",
                                        "ec2:StopInstances",
                                        "ec2:AssociateAddress"
                                    ],
                                    "Resource": "*"
                                }
                            ]
                        },
                        "PolicyName": { "Fn::Join": ["-", [ {"Ref": "PrefixStringParam"}, "ryan-inline-iam-policies-for-lambda-role" ]] }
                    }
                ]
            }
        },

        "LambdaFunctionResource": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "S3Bucket": "us-west-2-avx-ryan-bucket",
                    "S3Key": "aviatrix_lambda_for_tgw_actions.zip"
                },
                "FunctionName": { "Fn::Join": ["-", [ {"Ref": "PrefixStringParam"}, "ryan-lambda-function-for-avx-actions" ]] },
                "Handler": "aviatrix_lambda_for_tgw_actions.lambda_handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaIamRoleResource",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": "500",
                "MemorySize": "128"
            }
        }
    },

    "Outputs": {
        "URL": {
            "Description": "Aviatrix Controller GUI log in URL",
            "Value": {
                "Fn::Join": [":////", ["https", {"Ref": "AviatrixControllerHostnameParam"}]]
            }
        }
    }
}
